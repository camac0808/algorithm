function power(num, pow) {
  // base case
  if (pow === 0) return 1;
  // recursion case
  return num * power(num, pow-1)
}

console.log('power', power(2, 0)); // 1
console.log('power', power(2, 2)); // 4
console.log('power', power(2, 4)); // 16

function factorial(num) {
  if (num < 0) return 0;
  // base case
  if (num <= 1) return 1;
  // recursion case
  return num * factorial(num - 1);
}

console.log('factorial', factorial(1)); // 1
console.log('factorial', factorial(2)); // 2
console.log('factorial', factorial(4)); // 24
console.log('factorial', factorial(7)); // 5040

function productOfArray(arr) {
  // base case
  if (arr.length === 0) return 1;
  // recursion case
  return arr[0] * productOfArray(arr.slice(1))
}

console.log('productOfArray', productOfArray([1,2,3])); // 6
console.log('productOfArray', productOfArray([1,2,3,10])); // 60


function recursiveRange(num){
  // base case
  if (num === 1) return 1;
  // recursive case
  return num + recursiveRange(num - 1);
}

console.log('recursiveRange', recursiveRange(6)); // 21
console.log('recursiveRange', recursiveRange(10)); // 55



function fib(num){
  // base case
  if (num <= 2) return 1;
  // recursion case
  return fib(num - 1) + fib(num - 2);
}

// 1, 1, 2, 3, 5, 8, 13, ...
console.log('fib', fib(4)) // 3
console.log('fib', fib(10)) // 55
console.log('fib', fib(28)) // 317811
console.log('fib', fib(35)) // 9227465

function reverse(str){
  // base case
  if (str.length <= 1) return str; 
  // recursion case
  return reverse(str.slice(1)) + str[0];
}

console.log('reverse', reverse('awesome'));
console.log('reverse', reverse('rithmschool'));
// reverse('awesome') // 'emosewa'
// reverse('rithmschool') // 'loohcsmhtir'



function isPalindrome(str){
  // base case
  if (str[0] !== str[str.length - 1]) return false;
  if (str.length <= 1) return true;
  // recursion case
  return isPalindrome(str.slice(1, -1));
}

console.log('isPalindrome', isPalindrome('awesome')) // false
console.log('isPalindrome', isPalindrome('tacocat')) // true
console.log('isPalindrome', isPalindrome('amanaplanacanalpanama')) // true
console.log('isPalindrome', isPalindrome('amanaplanacanalpandemonium')) // false

// SAMPLE INPUT / OUTPUT
// const isOdd = val => val % 2 !== 0;

// someRecursive([1,2,3,4], isOdd) // true
// someRecursive([4,6,8,9], isOdd) // true
// someRecursive([4,6,8], isOdd) // false
// someRecursive([4,6,8], val => val > 10); // false

const isOdd = (val) => val % 2 !== 0; // 홀수

function someRecursive(arr, func){
  // base case
  if (arr.length === 0) return false;
  if (func(arr[0])) return true;
  // recursion case
  return someRecursive(arr.slice(1), func)
}

console.log('someRecursive', someRecursive([1,2,3,4], isOdd));
console.log('someRecursive', someRecursive([4,6,8,9], isOdd));
console.log('someRecursive', someRecursive([4,6,8], isOdd));
console.log('someRecursive', someRecursive([4,6,8], val => val > 10));

function flatten(arr){
  let newArr = [];
  
  for (const i of arr) {
    if (Array.isArray(i) === true) {
      newArr = newArr.concat(flatten(i));
    } else if (Array.isArray(i) === false) {
      newArr.push(i);
    }
  }
  return newArr;
}

console.log(flatten([1, 2, 3, [4, 5]])) // [1, 2, 3, 4, 5]
// flatten([1, [2, [3, 4], [[5]]]]) // [1, 2, 3, 4, 5]
// flatten([[1],[2],[3]]) // [1,2,3]
// flatten([[[[1], [[[2]]], [[[[[[[3]]]]]]]]]]) // [1,2,3]